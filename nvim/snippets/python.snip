snippet py
options head
	#!/usr/bin/env python

snippet py3
options head
	#!/usr/bin/env python3

snippet p
	print(${1})

snippet pe
alias printerr
	print(${1:s},file=sys.stderr)

snippet printf
	print(${1:s},file=f)

snippet header
options head
	################################################
	# ${1:Title}
	#	by Maarten van Gompel (proycon)
	#	proycon AT anaproy DOT nl
	#	Centre for Language and Speech Technology
    #   Radboud University Nijmegen
	#
	# ${2:Description}
	#
	# Licensed under GNU Public License v3
	#
	################################################

snippet argparse
options head
	import argparse
	parser = argparse.ArgumentParser(description="${1}", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('--storeconst',dest='settype',help="", action='store_const',const='somevalue')
	parser.add_argument('-f','--dataset', type=str,help="", action='store',default="",required=False)
	parser.add_argument('-i','--number',dest="num", type=int,help="", action='store',default="",required=False)
	parser.add_argument('bar', nargs='+', help='bar help')
	args = parser.parse_args()
	#args.storeconst, args.dataset, args.num, args.bar

snippet addargb
options head
	parser.add_argument('--${0:long}','-{${0:short}),help="${1:help}", action='store_true', required=False)

snippet addargs
options head
	parser.add_argument('--${0:long}','-{${0:short}),type=str, help="${1:help}", action='store', required=False)

snippet addargi
options head
	parser.add_argument('--${0:long}','-{${0:short}),type=int, help="${1:help}", action='store', required=False)

snippet addargf
options head
	parser.add_argument('--${0:long}','-{${0:short}),type=float, help="${1:help}", action='store', required=False)

snippet importfuture
options head
	from __future__ import print_function, unicode_literals, division, absolute_import

snippet stripaccents
options head
	unicodedata.normalize('NFKD',${1:s}).encode('ascii','ignore')

snippet logging
alias logger
options head
	logger.error(${0:msg})
	import logging
	logger = logging.getLogger(${0:__name__})
snippet logerr
alias le
options head
	logger.error(${0:msg})

snippet logdebug
alias lg debug
options head
	logger.error(${0:msg})
	logger.debug(${0:msg})
snippet logwarn
alias lw warn
options head
	logger.error(${0:msg})
	logger.warning(${0:msg})
snippet logcrit
alias lc
options head
	logger.error(${0:msg})
	logger.critical(${0:msg})
snippet loginfo
alias log li
options head
	logger.error(${0:msg})
	logger.info(${0:msg})

snippet readxml
options head
	import lxml.etree
	doc = lxml.etree.parse(${1:filename}).getroot()
	for element in doc:
		#element.tag, element.attrib['blah'], element.text
		${2:pass}
	for element in doc.xpath("//test"):
		${3:pass}

snippet xpath
options head
	doc = lxml.etree.parse(${1:filename}).getroot()
	for element in doc.xpath("//test"):
		#element.tag, element.attrib['blah'], element.text
		${2:pass}

snippet readtsv
alias readtab
options head
	with open(${1:filename},'r',encoding='utf-8') as f:
		for line in f:
			if line and line[0] != '#':
				fields = line.split("\t")

snippet readwords_pretokenised
options head
	with open(${1:filename},'r',encoding='utf-8') as f:
		for line in f:
			if line:
				words = line.split(" ")
				for word in words:
					${2:pass}

snippet readwords_tokenise
options head
	from pynlpl.textprocessors import Tokenizer
	with open(${1:filename},'r',encoding='utf-8') as f:
		for sentence in Tokenizer(f, ${2:splitsentences_bool},${3:onesentenceperline_bool}):
			if sentence:
				words = sentence.split(" ")
				for word in words:
					${4:pass}

snippet readngrams_pretokenised
options head
	from pynlpl.textprocessors import Windower
	with open(${1:filename},'r',encoding='utf-8') as f:
		for line in f:
			if line:
				for ngram in Windower(line.split(" "),${2:n},None,None):
					${2:pass}

snippet readngrams_tokenise
options head
	from pynlpl.textprocessors import Tokenizer, Windower
	with open(${1:filename},'r',encoding='utf-8') as f:
		for sentence in Tokenizer(f, ${2:splitsentences_bool},${3:onesentenceperline_bool}):
			if sentence:
				for ngram in Windower(sentence.split(" "),${4:n},None,None):
					${4:pass}

snippet readcsv
options head
	import csv
	with open(${1:filename}, 'r') as f:
		reader = csv.reader(f, delimiter=',', quotechar='"')
		for row in reader:
			print(', '.join(row))

snippet readzip
options head
	import zipfile
	with zipfile.ZipFile(${1:filename},'r',zipfile.ZIP_DEFLATED) as f:
		${2:pass}

snippet readgzip
options head
	import gzip
	with gzip.open(${1:filename},'r') as f:
		${2:pass}

snippet readbz2
options head
	import bz2
	with bz2.open(${1:filename},'r') as f:
		${2:pass}

snippet readfolia
options head
	from pynlpl.formats import folia
	doc = folia.Document(file=${1:filename})

snippet newfolia
options head
	from pynlpl.formats import folia
	doc = folia.Document(id=${1})
	doc.append(folia.Text, id="text.1")

snippet writecsv
options head
	import csv
	with open(${1:filename}, 'w',encoding='utf-8') as f:
		writer = csv.writer(f, delimiter=',',quotechar='"')
		writer.writerows(${2:someiterable})

snippet pd
options head
    import pandas as pd

snippet np
options head
    import numpy as np

snippet pdreadcsv
    pd.read_csv(${1:filename})

snippet pdreadtsv
    df = pd.read_table(${1:filename}, sep="\t", index_col=0) #index_col is index or col name string


snippet pdfilter
    df[df.column_y == "needle"].column_z #filter by one column, output by other column

snippet plotfunc
options head
	import pylab
	import numpy as np

	pylab.figure(figsize=(8,5), dpi=80)
	pylab.subplot(111)

	X = np.linspace(-1, 1, 100,endpoint=True)
	f = X**2

	pylab.plot(X, f, color="blue", linewidth=2.5, linestyle="-")
	#pylab.plot(X, S, color="red", linewidth=2.5, linestyle="-")

	pylab.xlim(-1, 1)
	pylab.xticks([-1,-0.5,0,0.5,1])

	pylab.ylim(f.min()*1.1,f.max()*1.1)
	pylab.yticks([-1, 0, +1])

	# pylab.savefig("../figures/exercice_5.png",dpi=72)
	pylab.show()

snippet plotbar
options head
	import pylab
	import numpy as np

	n = 12
	X = np.arange(n)
	Y1 = (1-X/float(n)) * np.random.uniform(0.5,1.0,n)
	Y2 = (1-X/float(n)) * np.random.uniform(0.5,1.0,n)

	pylab.bar(X, +Y1, facecolor='#9999ff', edgecolor='white')
	pylab.bar(X, -Y2, facecolor='#ff9999', edgecolor='white')

	for x,y in zip(X,Y1):
		pylab.text(x+0.4, y+0.05, '%.2f' % y, ha='center', va= 'bottom')

	pylab.ylim(-1.25,+1.25)
	pylab.show()

snippet httpget
options head
	import urllib.request
	import urllib parse
	#opener = urllib.request.build_opener()
	#opener.addheaders = [('User-agent', 'Mozilla/5.0')]
	params = urllib.parse.urlencode({'foo': 1, 'bar': 2})
	f = urllib.request.urlopen("http://${1}/" % params) #or opener.open()
	for line in f:
		${2:pass}

snippet httppost
options head
	import urllib.request
	import urllib parse
	#opener = urllib.request.build_opener()
	#opener.addheaders = [('User-agent', 'Mozilla/5.0')]
	params = urllib.parse.urlencode({'foo': 1, 'bar': 2})
	f = urllib.request.urlopen("http://${1}/", params) #or opener.open()
	for line in f:
		${2:pass}

snippet httpauth
options head
	import urllib.request
	auth_handler = urllib.request.HTTPBasicAuthHandler()
	auth_handler.add_password(realm=realm,uri=url,user=user, passwd=password)
	opener = urllib.request.build_opener(auth_handler)
	urllib.request.install_opener(opener)
	f = urllib.request.urlopen(url)
	for line in f:
		${2:pass}

snippet httpescape
options head
	import urllib.parse.quote
	s = urllib.parse.quote(s)

snippet htmlunescape
options head
	import html.parser
	s = html.parser.HTMLParser().unescape(${1})

snippet htmlescape
options head
	import html
	s = html.escape(${1})

snippet xmlunescape
options head
	from xml.sax.saxutils import escape, unescape
	unescape(${1})

snippet xmlescape
options head
	from xml.sax.saxutils import escape, unescape
	escape(${1})

snippet clamclient
options head
	import clam.common.client
	import time
	client = clam.common.client.CLAMClient(url, user, password)
	#client.index()
	client.create(project)
	client.upload(project, inputtemplate, localfilepath, **parameters)
	client.start(project, parameters)
	while data.status == 1:
		data = client.get()
		time.sleep(1)
	if data.status == 2:
		client.download(project, filepath, localtargetfile)
		client.delete(project)
	else:
		raise Exception("Error")

snippet getalllinks
options head
	from urllib.request import urlopen #python2: urllib2.urlopen
	import re

	#connect to a URL
	website = urlopen(url)

	#read html code
	html = website.read()

	#use re.findall to get all the links
	links = re.findall('"((http|ftp)s?://.*?)"', html)

	print(links)

snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
snippet trye Try/Except/Else
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet tryf Try/Except/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet tryef Try/Except/Else/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}


snippet numericmethods
options head
	def __add__(self, other):
		${1:pass}

	def __sub__(self, other):
		${2:pass}

	def __mul__(self, other):
		${3:pass}

	def __div__(self, other):
		${4:pass}

	def __pow__(self, pow):
		${4:pass}

snippet boolmethods
options head
	def __and__(self, other):
		${12:pass}

	def __neg__(self, other):
		${13:pass}

	def __or__(self, other):
		${14:pass}

snippet cmpmethods
options head
	def __eq__(self, other):
		${1:pass}

	def __ne__(self, other):
		${2:pass}

	def __lt__(self, other):
		${3:pass}

	def __le__(self, other):
		${4:pass}

	def __gt__(self, other):
		${5:pass}

	def __ge__(self, other):
		${6:pass}

snippet containermethods
options head
	def __len__(self):
		${1:pass}

	def __getitem__(self, key):
		${2:pass}

	def __setitem__(self, key, value):
		${3:pass}

	def __delitem__(self, key):
		${4:pass}

	def __iter__(self):
		${5:pass}

	def __reversed__(self):
		${6:pass}

	def __contains__(self, item):
		${7:pass}

snippet testcase
alias test
options head
	class Test${1:Class}(unittest.TestCase):
		def setUp(self):
			${2:pass}

		def tearDown(self):
			${3:pass}

		def test_${4:name}(self):
			${5:pass}

snippet testeq
	self.assertEqual(${1:first},${2:second})

snippet test1
	self.assertTrue(${1:first})

snippet test0
	self.assertFalse(${1:first})

snippet pdb
options head
	import pdb; pdb.set_trace()

snippet ipdb
options head
	import ipdb; ipdb.set_trace()

snippet npa
	np.array(${1})

snippet colorf
options head
	ansicolors = {"red":31,"green":32,"yellow":33,"blue":34,"magenta":35, "bold":1 }
	def colorf(color):
		return lambda x: "\x1B[" + ansicolors[str(color)] + "m" + x + "\x1B[0m"

snippet printc
options head
	print(colorf(${1:color})(${2}))

snippet printce
options head
	print(colorf(${1:color})(${2}), file=sys.stderr)

snippet begintime
options head
	begintime = time.time()

snippet printtime
	print(${1:datetime.datetime.now()}.strftime(${2:"%Y:%M:%D %h:%m:%s"})

snippet printdate
	print(${1:datetime.datetime.now()}.strftime(${2:"%Y:%M:%D"})

snippet printdatetime
	print(${1:datetime.datetime.now()}.strftime(${2:"%Y:%M:%D %h:%m:%s"})

snippet duration
	int(time.time() - begintime)

snippet sample
	random.sample(${1:iterable},${2:size})

snippet windower
options head
	from pynlpl.textprocessors import Windower
	for ngram in Windower(${1:iterable},${2:n}, None, None):
		${2:pass}

snippet multiwindower
options head
	from pynlpl.textprocessors import MultiWindower
	for ngram in MultiWindower(${1:iterable},${2:1}, ${3:maxn}, None, None):
		${2:pass}

snippet tokenize
alias tokenise
options head
	from pynlpl.textprocessors import Tokenizer
	with open(${1:filename},'r',encoding='utf-8') as f:
		for sentence in Tokenizer(f, ${2:splitsentences_bool},${3:onesentenceperline_bool}):
			${4:pass}

snippet calcoverlap
options head
	from pynlpl.textprocessors import calculate_overlap
	for overlap, placement in calculate_overlap(${1:haystack}, ${2:needle},${3:allowpartial_bool}):
		${4:pass}

snippet xslt
options head
	import lxml.etree
	def xslttransform(xsltfilename, sourcefilename, targetfilename, encoding = 'utf-8'):
		xsldir = os.path.dirname(__file__)
		if xsltfilename[0] != '/': xsltfilename = xsldir + '/' + xsltfilename
		xslt = lxml.etree.parse(xsltfilename)
		transformer = lxml.etree.XSLT(xslt)
		parsedsource = lxml.etree.parse(sourcefilename)
		transformed = transformer(parsedsource)
		with open(targetfilename,'wb') as f:
			f.write( lxml.etree.tostring(transformed, pretty_print=True, encoding=encoding) )

snippet printxml
alias xmlprint
	print(lxml.etree.tostring(${1:xml}, pretty_print=True, encoding='utf-8'))


snippet newxml
options head
	import lxml.etree
	xml = lxml.etree.Element(${1:"root"})
	c = lxml.etree.Element(${2:"child"})
	c.text = "text"
	xml.append(c)
	lxml.etree.tostring(xml, pretty_print=True, encoding='utf-8')

snippet newxmlbuilder
options head
	from lxml.builder import E
	xml = E.root(
		E.child("text",someattrib="blah")
	)

snippet newxmlbuilderns
options head
	from lxml.builder import E
	E = ElementMaker(namespace=${1:"http://my.de/fault/namespace"}, nsmap={'ns' : $1}
	xml = E.root(
		E.child("text",someattrib="blah")
	)

snippet frogclient
options head
	from pynlpl.clients.frogclient import FrogClient

	frogclient = FrogClient(${1:'localhost'},${2:port})
	for sentence in sentences:
		#sentence is a str
		response = frogclient.process(sentence)
		words = []
		for i, (word, lemma, morph, pos) in enumerate(response):
			if word:
				words.append(( word,lemma,morph,pos) )

snippet timbl
options head
	import timbl
	classifier = timbl.TimblClassifier(${1:id}, ${2:timblopts} )

	#add some instances
	classifier.append( (1,0,0), 'financial')
	classifier.append( (0,1,0), 'furniture')
	classifier.append( (0,0,1), 'geographic')

	classifier.train()

	#classifier.save()
	classlabel, distribution, distance = classifier.classify( (1,0,0) )

	#or create a test file:
	#classifier.addinstance("testfile", (1,1,0),'geograpic' ) #this one will be wrongly classified as financial & furniture
	#classifier.test("testfile")

	print(classifier.getAccuracy())


snippet mp
alias process
options head
    """Simple multiprocessing with Process"""
	from multiprocessing import Process

	def f(name):
	    print('hello', name)

	if __name__ == '__main__':
	    p = Process(target=f, args=('bob',))
	    p.start()
	    p.join()

snippet mppool
alias pool
options head
    """Simple multiprocessing with a Pool""
	from multiprocessing import Pool

	def f(x):
		return x*x

	if __name__ == '__main__':
		with Pool(processes=4) as pool:        # start 4 worker processes
			result = pool.apply_async(f, [10]) # evaluate "f(10)" asynchronously
			print(result.get(timeout=1))       # prints "100" unless your computer is *very* slow
			print(pool.map(f, range(10)))      # prints "[0, 1, 4,..., 81]"


snippet defruncmd
options head
	def execheader(name,*outputfiles, **kwargs):
		print("----------------------------------------------------",file=sys.stderr)
		if outputfiles:
			skip = True
			for outputfile in outputfiles:
				if not os.path.exists(outputfile):
					skip = False
					break
			if skip:
				print(colorf('bold')colorf('yellow")("Skipping " + name), file=sys.stderr)
				return False
		if 'cmd' in kwargs:
			print("Calling " + name + " " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), file=sys.stderr)
			print("Command "+ ": " + kwargs['cmd'], file=sys.stderr)
		else:
			print(colorf('bold')colorf('white')("Calling " + name + " " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),file=sys.stderr)
		return True

	def execfooter(name, r, *outputfiles, **kwargs):
		if 'successcodes' in kwargs:
			successcodes = kwargs['successcodes']
		else:
			successcodes = [0]
		if r in successcodes:
			print(colorf('bold')colorf('green')("Finished " + name + " " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),file=sys.stderr)
		else:
			print(colorf('bold')colorf('red')("Runtime error from " + name + ' (return code ' + str(r) + ') ' +datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),file=sys.stderr)
			return False
		if outputfiles:
			error = False
			for outputfile in outputfiles:
				if os.path.exists(outputfile):
					print("Produced output file " + outputfile,file=sys.stderr)
				else:
					print("Expected output file " + outputfile+ ", not produced!",file=sys.stderr)
					error = True
			if error:
				return False
		return True

	def runcmd(cmd, name, *outputfiles, **kwargs):
		if not execheader(name,*outputfiles, cmd=cmd): return True
		r = subprocess.call(cmd, shell=True)
		return execfooter(name, r, *outputfiles,**kwargs)

snippet runcmd
options head
	r = runcmd(${1:cmd},${2:name},${3:*outputfiles})

snippet mysql
options head
	import pymysql
	conn = pymysql.connect(host=${1:'127.0.0.1'}, user=${2:'root'}, passwd=${3:None}, db='mysql')
	cur = conn.cursor()
	cur.execute("SELECT ${4:*} FROM ${5:somedatabase}")
	for r in cur:
		print(r)
	cur.close()
	conn.close()

snippet linalg
options head
	import scipy.linalg
	x = linalg.solve(a,b)

snippet mat
	np.mat([${1:[1,0,0],[0,1,0],[0,0,1]}])

snippet enc
	encoding='utf-8'

snippet mail
alias smtp
options head
	import smtplib
	from email.mime.text import MIMEText

	msg = MIMEText(${1:"message"})

	msg['Subject'] = ${2:"subject"}
	from = msg['From'] = ${3:"from"}
	to = msg['To'] = ${4:"to"}

	s = smtplib.SMTP(${5:'localhost'})
	s.sendmail(from, [to], msg.as_string())
	s.quit()

snippet opb
	os.path.basename(${1})

snippet opd
	os.path.dirname(${1})

snippet datetime
    from datetime import datetime

snippet now
	datetime.now()

snippet strftime
    .strftime("%Y-%m-%d %H:%M:%S")

snippet fromtimestamp
    datetime.fromtimestamp(${1:timestamp})

snippet ix
	import lxml.etree

snippet idt
	import datetime.datetime

snippet im
	import math

snippet iop
	import os.path

snippet ii
	import os
	import sys

snippet idd
options head
	from collections import defaultdict

snippet inp
options head
	import numpy as np

snippet isp
options head
	import scipy

snippet now
	datetime.datetime.now()

snippet stripext
	'.'join(${1:s}.split('.')[:-1])

snippet super
	super(${1}, self).${2:__init__}()}


snippet pairwise
options head
	from itertools import tee, izip
	def pairwise(l)
		"""[1,2,3,4] -> [(1,2),(2,3),(3,4)]"""
		a, b = tee(l)
		next(b, None)
		return izip(a,b)

snippet pairwise2
options head
	def pairwise2(l)
		"""[1,2,3,4] -> [(1,2),(3,4)]"""
		a = iter(l)
		return zip(a,a)

snippet httpserver Twisted-based HTTP Server
alias httpd twisted
options head
	from twisted.web import server, resource
	from twisted.internet import reactor

	class Resource(resource.Resource):
		isLeaf = True
		numberRequests = 0

		def __init__(self, settings):
			self.settings = settings

		def render_GET(self, request):
			self.numberRequests += 1
			if b'input' in request.args:
				request.setHeader(b"content-type", b"application/xml")
				print("Server input: ", request.args[b'input'][0], file=sys.stderr)
				return ""
			else:
				request.setHeader(b"content-type", b"text/html")
				return b"""<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><html>
	<head>
		<meta http-equiv="content-type" content="application/xhtml+xml; charset=utf-8"/>
		<title></title>
	</head>
	<body>
	</body>
	</html>"""

	class Server:
		def __init__(self, port, settings):
			assert isinstance(port, int)
			reactor.listenTCP(port, server.Site(Resource(settings)))
			reactor.run()

snippet server
alias tcpserver tcplisten
options head
	from twisted.internet import protocol, reactor
	from twisted.protocols import basic

	class Protocol(basic.LineReceiver):
		def lineReceived(self, sentence):
			#self.factory.settings
			self.sendLine(sentence) #echo back

	class Factory(protocol.ServerFactory):
		protocol = Protocol

		def __init__(self, settings):
			self.settings = settings #custom thing, just an example


	class Server:
		def __init__(self, settings, port=12346):
			reactor.listenTCP(port, Factory(settings))
			reactor.run()

snippet client
alias tcpclient
options head
	import socket

	class Client():
		def __init__(self,host= "localhost",port=12346):
			self.BUFSIZE = 1024
			self.socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM) #Create the socket
			self.socket.settimeout(120)
			assert isinstance(port,int)
			self.socket.connect((host, port)) #Connect to server

		def process(self, sentence):
			self.socket.send(sentence+ "\r\n")
			return self.socket.recv(self.BUFSIZE).strip()

snippet isint
	isinstance($1,int)

snippet isstr
	isinstance($1,str)

snippet isfloat
	isinstance($1,float)

snippet islist
	isinstance($1,list)

snippet istuple
alias istup
	isinstance($1,tuple)

snippet isseries
    isinstance($1, (list,set,tuple))

snippet isdict
	isinstance($1,dict)

snippet isa
	isinstance($1,${2:type})

snippet sf
	self.${1} = $1

snippet kwg
    kwargs.get('$1',${2:None})

snippet initkwg
	self.${1:var_name} = kwargs.get('$1', ${2:None})

snippet kwgl
	${1:var_name} = kwargs.get('$1', ${2:None})

snippet savefile
alias save
options head
	with open(${1:filename},'w',encoding='utf-8') as f:
		f.write(${2})

snippet classeval
options head
	from pynlpl.evaluation import ClassEvaluation
	e = ClassEvaluation(${1:goals}, ${2:observations})
	print(e)
	print(e.confusionmatrix())
	#e.accuracy(cls), fscore, recall, precision etc

snippet readjson
alias loadjson
    with open(${1:filename},"r", encoding="utf-8") as f:
        ${2:data} = json.load(f)

snippet writejson
alias savejson
    with open(${1:filename},"w", encoding="utf-8") as f:
        json.dump(${2:data}, ensure_ascii=False, indent=4)

snippet printjson
    print(json.dumps(${1:data}, ensure_ascii=False, indent=4))


